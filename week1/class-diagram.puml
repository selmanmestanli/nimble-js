@startuml

class Customer <<Entity>> {
    + id: Number
    + name: String
    + email: String
    + password: String
    + address: String
    + phone: String
    + orders: Order[]
    + cart: Cart
    + addToCart()
    + removeFromCart()
    + proceedToCheckout()
}

class Seller <<Entity>> {
    + id: Number
    + name: String
    + phone: String
    + email: String
    + password: String
    + serviceArea: String
    + completeOrder()
    + cancelOrder()
    + updateOrderStatus()
}

class Flower <<Entity>> {
    + name: FlowerName[]
    + price: Number
}

enum FlowerName{
    Roses 
    Lillies 
    Orchids 
    Sunflower
}

class Cart {
    + items: Flower[]
    + totalCartAmount: Number
    + status: String
    + updateStatus()
}

class Order <<Entity>> {
    + orderId: Number
    + cart: Cart
    + deliveryAddress: DeliveryAddress
    + date: String
    + giftNote: String
    + zone: String
    + status: String
    + paymentStatus: String
    + totalAmount: Cart
    + seller: assignSeller
    + proceedToPayment()
    + getPaymentStatus()
    + sendOrderToSeller()
    + getOrderStatus()
}

class DeliveryAddress {
    + deliveryAddress: String[]
    + saveAddress()
    + selectAddress()
}

class Payment{
    + orderId: Number
    + totalAmount: Number
    + creditCardNumber: Number
    + paymentStatus: String
    + completePayment()
    + updatePaymentStatus()
}

enum PaymentStatus{
    success
    error
}

enum ServiceArea{
    Seller1: Charlottenburg
    Seller2: Mitte 
    Seller3: Kreuzberg
}

enum OrderStatus{
    delivered
    inTransit
    cancelled
}

interface AssignSeller{
    + orderZone: String
    + serviceArea: String
    + assignSeller()
}

Customer "0..n" *--> "1" Cart
Customer "0..n" *--> "m" Order
Cart o--> Flower
Flower --> FlowerName
Order --> DeliveryAddress
Payment --> PaymentStatus
Order <--> Payment
Seller <--> AssignSeller
AssignSeller --> ServiceArea
AssignSeller --> Order
Seller "0..n" o--> "m" Order
Seller --> OrderStatus
Cart *--> Order

@enduml
